// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url = env("PRISMA_MYSQL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

enum MemberRole {
  ADMIN
  VENDOR
  USER
}

model User {
  id Int @id @default(autoincrement())
  role MemberRole @default(USER)
  userId String @unique
  name String
  hashed_password String
  phone String @db.VarChar(20)
  phone_e164 String? @db.VarChar(20)
  is_phone_verified Boolean? @db.TinyInt
  refreshToken String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_delete Boolean @default(false)
  delete_at DateTime?

  seatRows SeatRow[]
  reservaitons Reservation[]
}

model Concert {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  subtitle String @db.Text
  genre String
  rating Int
  runningTime Int
  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt  DateTime?

  concertFiles ConcertFile[]
  reservations Reservation[]
  seatRows SeatRow[]
  venues Venue[]
  startAts StartAt[]
  seatRanks SeatRank[]
  floors Floor[]
  sections Section[]
  seatColumns SeatColumn[]
}

model ConcertFile {
  id Int @id @default(autoincrement())
  type String
  fieldName String
  originalName String
  encoding String
  mimeType String
  destination String
  fileName String
  path String
  size Int
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([concertId])
}

model StartAt {
  id Int @id @default(autoincrement())
  startAt String
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([concertId])
}

model Venue {
  id Int @id @default(autoincrement())
  city String
  location String
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([concertId])
}

model SeatRank {
  id Int @id @default(autoincrement())
  seatRank String
  count Int
  price Int
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  seatRows SeatRow[]

  @@index([concertId])
}

model Floor {
  id Int @id @default(autoincrement())
  floor Int
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([concertId])

  sections Section[]
  seatColumns SeatColumn[]
  seatRows SeatRow[]
}

model Section {
  id Int @id @default(autoincrement())
  section String
  floorId Int?
  floor Floor? @relation(fields: [floorId], references: [id])
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([floorId])
  @@index([concertId])

  seatColumns SeatColumn[]
  seatRows SeatRow[]
}

model SeatColumn {
  id Int @id @default(autoincrement())
  column Int
  count Int
  seatRank String @db.VarChar(10)
  sectionName String @db.VarChar(10)
  floorId Int?
  floor Floor? @relation(fields: [floorId], references: [id])
  sectionId Int?
  section Section? @relation(fields: [sectionId], references: [id])
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([sectionId])
  @@index([floorId])
  @@index([concertId])

  seatRows SeatRow[]
}

model SeatRow {
  id Int @id @default(autoincrement())
  seatNumber Int
  userId Int?
  user User? @relation(fields: [userId], references: [id])
  isReserved Boolean @default(false)
  floorId Int?
  floor Floor? @relation(fields: [floorId], references: [id])
  sectionId Int?
  sectionName String?
  section Section? @relation(fields: [sectionId], references: [id])
  seatColumnId Int?
  seatColumn SeatColumn? @relation(fields: [seatColumnId], references: [id])
  concertId Int
  concert Concert @relation(fields: [concertId], references: [id])
  seatRankId Int?
  seatRankName String?
  seatRank SeatRank? @relation(fields: [seatRankId], references: [id])
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([floorId])
  @@index([sectionId])
  @@index([seatColumnId])
  @@index([concertId])
  @@index([seatRankId])
}

model Reservation {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  userId Int
  concertId Int
  user User @relation(fields: [userId], references: [id])
  concert Concert @relation(fields: [concertId], references: [id])

  @@index([userId])
  @@index([concertId])
}

model PerformanceRank {
  id Int @id @default(autoincrement())
  genre String
  type String
  imageUrl String
  title String
  startDate String
  endDate String
  distributor String
  createdAt DateTime @default(now())
}